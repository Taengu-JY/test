● base64 ●

●바이너리 파일
 2진수 데이터만으로 인코딩된 파일이라 사람이 직접 읽을 순 없다.
 데이터 처리에 비용이 적게 들고 처리속도가 빠름
 ex) 대표적 확장자 : exe, dll, zip, rar, mp3, mpg, jpg, png 등

●base64 인코딩
 바이너리 데이터를 안전하게 전송할수 있는 방법

ASCII의 경우는 7bits encoding 인데 나머지 1bit를 처리하는 방식이 시스템별로 상이하며
일부 제어문자도  시스템별로 다른 코드값을 가짐.

base64 인코딩은 8비트의 이진데이터를 6비트씩 묶어서 인코딩하는 방식이며 빈자리는
padding기호로 채워넣어 안전하게 전달이 가능해진다.



● 사용법

. 은 객체의 속성에 접근, 메서드호출, 모듈의 함수, 클래스 또는 변수에 접근 시 사용


 import base64

base64.b64encode()  >> base64 모듈에 포함된 b64encode 함수를 호출하여 () 바이트형식을 받아 인코딩.

base64.b64decode()  >> base64 모듈에 포함된 b64decode 함수를 호출하여 () 바이트형식을 받아 디코딩.






● 요점파악

base64의 방식은 안전하게 데이터를 전송할 수 있어서 많이 사용된다.
base64는 바이너리 형식으로 데이터를 받아서 인코딩과 디코딩을 해준다.

문서를 읽을때 처음부터 'rb' 바이너리 형식으로 읽거나  기존의 문서를 ASCII 또는 utf-8 형식으로 인코딩하여
바이너리 형식으로 바꾸어 줄 수가 있다.

모듈 사용법은 base64.b64encode() 로 인코딩 하고 base64.b64decode() 로 디코딩

디코딩 되어 나온 결과값은 바이너리 형식이므로 
출력할땐 utf-8 형식으로 한번더 디코딩 해주어야 사람이 읽을 수 있는 형태로 표시가 된다. 



-------------------------------------------------------------------------------------------------------------------

● 문자열 다루기

1. textwrap 모듈

# 생략 (100 이후 생략)
shorten_text = textwrap.shorten(text, width=100)

# 긴 문장 자르기
wrapped_text = textwrap.wrap(text, width=50)

# 긴 문장 줄바꿈
filled_text = textwrap.fill(text, width=50)


2. re(regular expression) 모듈 (정규표현식)
 
    contact = '''김미키 21 010-3344-5566 Mike@google.com 
             김소은 20 010-5032-1111 Soeun@naver.com
             유한슬 34 010-2789-1476 Lyu@school.ac.com
             박민철 40 010 4040 1313 Zoe@school.ac.com
             이민아 23 010-7777-2222 Kate@google.com'''

     regex = r'0\d{1,2}[ -]?\d{3,4}[ -]?\d{3,4}'   # 전화번호 정규표현식
 
     phone = re.findall(regex, contact)       # 전화번호 정규표현식에 해당하는것을 contact에서 찾아서 
                                                        리스트 형태로 반환
     print("\n".join(phone))                     # 위에서 찾은 전화번호들을 개행문자로 출력
                                                        .join() 메소드는 문자열 구성 요소들을 결합
                                                        리스트를 하나의 문자열로 결합할때도 사용된다.
   

    pat = re.compile(r'0\d{1,2}[ -]?\d{3,4}[ -]?\d{3,4}')      # 해당정규표현식을 컴파일하고
    print(pat.sub("***-****-****", contact))         # sub() 메서드를 사용하여 패턴이 일치하는 문자열을
                                                              주어진 문자열로 대체
  
    r'\w+'  : 문자나 숫자로 이루어진 하나이상의 연속된 문자열. 단어를 찾는데 사용되는 정규패턴


3. collections 모듈

words = re.findall(r'\w+', text)   # text에서 단어를 리스트로 words 에 반환
print(words)

counter = collections.Counter(words) #  words의 반환된 리스트의 각각의 빈도수를 산출
print(counter)



4. gensim


